"""
Django settings for yunxia_backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from datetime import timedelta

from loguru import logger
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2sj$xs0m$^usz6b=p0$bgio(0m-ja5--=(%1@2$z2o8x@ia@yb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'demo',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'yunxia_backend.middleware.cross_domain_middleware.CrossDomainMiddleware',
    'yunxia_backend.middleware.exception_middleware.ExceptionMiddleware',
    'yunxia_backend.middleware.http_log_middleware.HTTPLogMiddleware',
]

ROOT_URLCONF = 'yunxia_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yunxia_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'yunxia_backend',  # 数据库名
        'USER': 'root',  # MySQL 用户名
        'PASSWORD': 'root',  # MySQL 密码
        'HOST': 'localhost',  # 数据库地址（本地）
        'PORT': '3306',  # 端口号
        'OPTIONS': {
            'charset': 'utf8mb4',  # 推荐使用 utf8mb4 以支持完整的 Unicode
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTH_USER_MODEL = "demo.User"

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


log_path = os.path.join(BASE_DIR, "logs")
log_conf = {
    "level": "DEBUG",
    "format_string": "{time:YYYY:MM:DD:HH:mm:ss} | {thread.name} | {level} | {file.path}:{line} | {message}",
    "log_path": log_path,
    "common_log_path": os.path.join(log_path, 'draft.log')
}

logger.remove()
# 日志输出到控制台
logger.add(sys.stdout, format=log_conf.get("format_string"), level="DEBUG")
logger.add(log_conf.get("common_log_path"), format=log_conf.get("format_string"),
           level=log_conf.get("level"), rotation="00:00", retention="7 days")

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # 设置 JWT 访问 token 的过期时间
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # 设置刷新 token 的过期时间
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

image_dir = os.path.join(BASE_DIR, "store/images/")
if not os.path.exists(image_dir):
    os.makedirs(image_dir)

home_image_dir = os.path.join(BASE_DIR, "store/images/home/")
if not os.path.exists(home_image_dir):
    os.makedirs(home_image_dir)

design_images_dir = os.path.join(image_dir, "designer/")
if not os.path.exists(design_images_dir):
    os.makedirs(design_images_dir)

STATICFILES_DIRS = [
    home_image_dir,
    design_images_dir
]

static_root_path = os.path.join(image_dir, 'staticfiles')
if not os.path.exists(static_root_path):
    os.makedirs(static_root_path)

STATIC_URL = '/static/'
STATIC_ROOT = static_root_path

CONFIG_PATH = os.path.join(BASE_DIR, "conf", "application.yaml")
